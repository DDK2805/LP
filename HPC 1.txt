#include<iostream>
#include<vector>
#include<queue>
#include<omp.h>
using namespace std;

class Graph {
    vector<vector<int>> adj;
public:
    Graph(int V) : adj(V) {}
    
    void addEdge(int u, int v) { 
        adj[u].push_back(v); 
        adj[v].push_back(u); 
        
    }

    void dfs(int v, vector<bool>& vis) {
        vis[v] = true, cout << v << " ";
        for (int u : adj[v]) if (!vis[u]) dfs(u, vis);
    }

    void bfs(int s) {
        vector<bool> vis(adj.size(), false);
        queue<int> q;
        vis[s] = true;
        q.push(s);
        while (!q.empty()) {
            int v = q.front();
            q.pop(); 
            cout << v << " ";
            #pragma omp parallel for
            for (int i = 0; i < adj[v].size(); i++) {
                int u = adj[v][i];
                if (!vis[u]) {
                    #pragma omp critical
                    if (!vis[u]) vis[u] = true, q.push(u);
                }
            }
        }
    }
};

int main() {
    Graph g(7);
    for (auto [u, v] : vector<pair<int, int>>{{0,1},{0,2},{1,3},{1,4},{2,5},{2,6}})
        g.addEdge(u, v);

    vector<bool> vis(7, false);
    cout << "DFS: ", g.dfs(0, vis);
    cout << "\nBFS: ", g.bfs(0);
}